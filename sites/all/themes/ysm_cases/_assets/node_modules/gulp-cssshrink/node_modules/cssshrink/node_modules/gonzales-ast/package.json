{
  "name": "gonzales-ast",
  "version": "0.0.5",
  "description": "Gonzales' CSS AST traversal",
  "keywords": [
    "css",
    "transform",
    "ast"
  ],
  "author": {
    "name": "Stoyan",
    "email": "ssttoo@ymail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/stoyan/gonzales-ast.git"
  },
  "main": "index",
  "dependencies": {
    "gonzales": "*"
  },
  "readme": "This is library to help navigate CSS AST produced by the Gonzales CSS parser\n\n## Installation\n\n    $ npm install gonzales-ast\n\n## Why\n\nGonzales eats CSS and spits AST. It also eats AST and spits CSS.\n\nBut it doesn't have an API for AST-to-AST manipulations.\n\n\n## Tell me more\n\nAdditionally, this library makes the Gonzales' APIs a little more sensible (in the author's opinion).\n\nE.g. the `srcToCSSP()` method is available as `parse()`.\n\nCurrently this library offers:\n - renamed APIs\n - a method `traverse()` to walk the AST and visit each node\n\n## Renamed APIs\n\nSimple usage:\n\n    var gonzo = require('gonzales-ast');\n    var ast = gonzo.parse('a {margin: 0}'); // formerly `srcToCSSP()`\n    var css_string = gonzo.toCSS(ast); // formerly `csspToSrc()`\n  \nThere's also `toTree()` (formerly `csspToTree()`) that shows a formatted view of the AST.\n\n    gonzo.toTree(ast);\n  \nReturns the string:\n\n    ['stylesheet', \n      ['ruleset', \n        ['selector', \n          ['simpleselector', \n            ['ident', 'a'], \n            ['s', ' ']]], \n        ['block', \n          ['declaration', \n            ['property', \n              ['ident', 'margin']], \n            ['value', \n              ['s', ' '], \n              ['number', '0']]]]]]\n\n\n## AST visitors\n\nWhen traversing the AST you can provide any number of \"visitors\" that take a node and look at it, and maybe do something with it.\n\nLike:\n\n    var newast = gonzo.traverse(ast, [\n      visitor1,\n      visitor2,\n      {\n        test: function(name, nodes) {\n          return true;\n        },\n        process: function(node) {\n          return node;\n        }\n      }\n    ]);\n\n\nEach visitor must provide a `process()` method which returns a node or `false` (which removes the node from the tree)\n\nA visitor may provide an optional `test()` method which is a lightweight way to see whether or not the `process()` method should be called. `test()`methods return boolean.\n\nSee the `examples` directory for an examples of visitors that add, remove and change nodes.\n\n## UI\n\nTo admire the AST that Gonzales produces, [check this out](http://ast.csspatterns.com).\n\n## Other stuffs\n\n - https://github.com/css/gonzales - Gonzales itself\n - https://github.com/tonyganch/gonzales-pe - Fork of Gonzales that also supports preprocessors\n - https://github.com/csscomb/csscomb.js/ - Formatter on top of -pe. No AST-to-AST, only AST-to-string\n - https://github.com/ai/postcss/ - Another parser, source maps and more fun. Simpler AST.\n - https://github.com/visionmedia/rework - like above\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/stoyan/gonzales-ast/issues"
  },
  "homepage": "https://github.com/stoyan/gonzales-ast",
  "_id": "gonzales-ast@0.0.5",
  "_shasum": "84e71673655a615afc5a407a5e43d1bda19cc2e2",
  "_from": "gonzales-ast@*",
  "_resolved": "https://registry.npmjs.org/gonzales-ast/-/gonzales-ast-0.0.5.tgz"
}
