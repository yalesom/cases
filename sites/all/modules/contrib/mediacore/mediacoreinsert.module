<?php 

/**
 * @file
 * Main file for mediacoreinsert module.
 */

/**
 * Implementation of hook_menu().
 */
function mediacoreinsert_menu() {

  $items = array();

  $items['admin/config/content/mediacoreinsert'] = array(
    'title' => 'MediaCore Insert',
    'description' => 'Filter for MediaCore Videos and WYSIWYG editor button.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediacoreinsert_admin'),
    'access arguments' => array('administer mediacoreinsert settings'),
    'type' => MENU_NORMAL_ITEM,
   );
  $items['admin/mediacoreinsert/dashboard/%/%'] = array(
    'title' => 'mediacoreinsert',
    'page callback' => 'mediacoreinsert_dashboard_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4),
  );
  return $items;
}


function mediacoreinsert_admin() {
  $form = array();

  $form['mediacoreinsert_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Your MediaCore URL'),
    '#default_value' => variable_get('mediacoreinsert_url', 'http://demo.mediacore.tv'),
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t("The URL of your MediaCore library."),
    '#required' => TRUE,
  );
  $form['mediacoreinsert_maxresults'] = array(
    '#type' => 'textfield',
    '#title' => t('Max Results'),
    '#default_value' => variable_get('mediacoreinsert_maxresults', 6),
    '#size' => 2,
    '#maxlength' => 3,
    '#description' => t("How many results you would like returned, per page."),
    '#required' => TRUE,
  );
  $form['mediacoreinsert_embedsize'] = array(
    '#type' => 'radios',
    '#title' => t('Embedded Player Size'),
    '#default_value' => variable_get('mediacoreinsert_embedsize', 'large'),
    '#options' => array('large' => t('Large (~560x315)'),'small' => t('Small (~304x171)'),),
    '#description' => t("Sizes vary slightly based on ratio."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}


/**
 * Implementation of hook_theme().
 */
function mediacoreinsert_theme($existing, $type, $theme, $path) {
  return array(
    'mediacoreinsert_dashboard' => array(
      'arguments' => array('content' => NULL),
      'template' => 'mediacoreinsert_dashboard',
    ),
  );
}
/**
 * Template preprocess function for mediacoreinsert_dashboard().
 */
function template_preprocess_mediacoreinsert_dashboard(&$variables) {

  $max_per_page = variable_get('mediacoreinsert_maxresults',6); // how many results are shown per page
  // This is probably a really whacky way of getting the variables
  $editor = $variables[0];
  $pager = $variables[1];
  if ( !empty($_GET['search']) ) {
    $searchlabel = $_GET["search"];
    $variables['search'] = $_GET["search"];
    $searcher = $_GET["search"];
  } else {
    $searchlabel = 'Search';
    $variables['search'] = '';
    $searcher = '';
  }
  $variables['offset'] = $pager;
  $media_api = variable_get('mediacoreinsert_url','http://demo.mediacore.tv') . '/api/media';
  $data = array(
    'type' => 'video',
    'limit' => $max_per_page,
    'offset' => $variables['offset'],
    'search' => $searcher);
  $uri = $media_api . '?' . http_build_query($data);
  $result = json_decode(file_get_contents($uri));
  $variables['videos'] = $result->media;
  $variables['counted'] = $result->count;
  $variables['embedsize'] = variable_get('mediacoreinsert_embedsize','large');
  $variables['dashpath'] = base_path() . 'admin/mediacoreinsert/dashboard/' . $editor . '/';
  $prev = $pager - $max_per_page;
  $ne = $pager + $max_per_page;
  $variables['previous'] = $variables['dashpath'] . $prev . '?search=' . $searcher;
  $variables['next'] = $variables['dashpath'] . $ne . '?search=' . $searcher;
  $variables['howmanypages'] = ceil($variables['counted'] / $max_per_page);
  $variables['currentpage'] = $variables['offset'] / $max_per_page + 1;
  $variables['maxedout'] = '';
  if($variables['currentpage'] >= $variables['howmanypages']) {
    $variables['maxedout'] = 1;
  } 
  $variables['modulepath'] = base_path() . drupal_get_path('module', 'mediacoreinsert');
  $variables['styles'] = drupal_get_css();
  $variables['scripts'] = drupal_get_js();

}

/**
 * Creates the dashboard.
 */
function mediacoreinsert_dashboard_page($editor, $page) {
  module_invoke('admin_menu', 'suppress');
  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'mediacoreinsert') . '/css/mediacore.css');
  switch ($editor) {
    case 'wysiwyg_tinymce':
      drupal_add_js(wysiwyg_get_path('tinymce') . '/jscripts/tiny_mce/tiny_mce_popup.js');
      drupal_add_js(drupal_get_path('module', 'mediacoreinsert') . '/editors/tinymce/mediacore.js');
      break;
    case 'ckeditor':
    case 'wysiwyg_ckeditor':
      drupal_add_js(drupal_get_path('module', 'mediacoreinsert') . '/editors/ckeditor/mediacore.js');
      break;
  }
  
  
  $mc = array($editor, $page);
  print theme('mediacoreinsert_dashboard', $mc);
  exit();
}

/**
 * Implementation of hook_permission().
 */
function mediacoreinsert_permission() {
  return array('administer mediacoreinsert');
}

function mediacoreinsert_wysiwyg_plugin($editor, $version) {
  _mediacoreinsert_add_settings('wysiwyg_' . $editor);
  switch ($editor) {
    case 'tinymce':      
      $plugins['mediacoreinsert'] = array(
        'path' => drupal_get_path('module', 'mediacoreinsert') . '/editors/tinymce',
        'filename' => 'editor_plugin.js',
        'buttons' => array('mediacoreinsert' => t('MediaCore Insert')),
        'url' => 'http://drupal.org/project/mediacoreinsert',
        'load' => TRUE,
      );
      break;
    case 'ckeditor':
      $plugins['mediacoreinsert'] = array(
        'path' => drupal_get_path('module', 'mediacoreinsert') . '/editors/ckeditor',
        'filename' => 'plugin.js',
        'buttons' => array('mediacoreinsert' => t('MediaCore Insert')),
        'url' => 'http://drupal.org/project/mediacoreinsert',
        'load' => TRUE,
      );
      break;
    case 'fckeditor':
      $plugins['mediacoreinsert'] = array(
        'path' => drupal_get_path('module', 'mediacoreinsert') . '/editors/fckeditor/',
        'buttons' => array('mediacoreinsert' => t('MediaCore Insert')),
        'url' => 'http://drupal.org/project/mediacoreinsert',
        'load' => TRUE,
      );
    break;
  }

  return $plugins;
}


function _mediacoreinsert_add_settings($editor) {
  static $editor_settings_added = array();
  static $global_settings_added = FALSE;

  if (!isset($editor_settings_added[$editor])) {
    $editor_settings_added[$editor] = TRUE;
    $settings = array(
      'mediacoreinsert' => array('url' => array($editor => url('admin/mediacoreinsert/dashboard/'. $editor . '/0'))),
    );
    drupal_add_js($settings, 'setting');
  }

  if (!$global_settings_added) {
    $global_settings_added = TRUE;

    // Add global settings for video_filter
    $settings = array(
      'mediacoreinsert' => array(
        'modulepath' => drupal_get_path('module', 'mediacoreinsert'),
      ),
    );
    drupal_add_js($settings, 'setting');
  }
}


/**
 * Implementation of hook_filter_info().
 */
function mediacoreinsert_filter_info() {


  $filters['filter_html'] = array(
    'title' => t('MediaCore Filter'),
    'description' => t('Substitutes [mediacore:URL] with HTML5 video player.'),
    'process callback' => '_mediacoreinsert_process',
    'settings callback' => '_mediacoreinsert_settings',
    'tips callback'  => '_mediacoreinsert_tips',
    'cache' => FALSE,
  );
  return $filters;

}



function _mediacoreinsert_settings($format) {
}

/**
 * Implementation of hook_filter_tips().
 */
function _mediacoreinsert_tips($delta, $format, $long = FALSE) {
  if ($long) {
    return t('<p>You may insert videos from MediaCore sites by using a simple tag <code>[mediacore:URL width:560 height:315]</code>.</p>');
  }
  else {
    return t('You may insert MediaCore videos with [mediacore:URL width:560 height:315]');
  }
}

function _mediacoreinsert_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if (preg_match_all('/\[mediacore(\:(.+))?( .+)?\]/isU', $text, $matches_code)) {

    foreach ($matches_code[0] as $ci => $code) {

      $video = array('source' => $matches_code[2][$ci],
                     'width' => '560',
                     'height' => '315');
      if ($matches_code[3][$ci] && preg_match_all('/\s+([a-zA-Z_]+)\:(\s+)?([0-9a-zA-Z\/]+)/i', $matches_code[3][$ci], $matches_attributes)) {
         foreach ($matches_attributes[0] AS $ai => $attribute) {
           $video[$matches_attributes[1][$ai]] = $matches_attributes[3][$ai];
         }
      }
      $replacement = '
      <iframe src="' . $video['source'] . '/embed_player?iframe=True" 
            width="' . $video['width'] . '" 
            height="' . $video['height'] . '"
            frameborder="0"
            allowfullscreen="allowfullscreen" 
            mozallowfullscreen="mozallowfullscreen" 
            webkitallowfullscreen="webkitallowfullscreen">
      </iframe>';

      $text = str_replace($code, $replacement, $text);
      
    }
  }
  return $text;
}

