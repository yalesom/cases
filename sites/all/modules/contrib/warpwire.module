<?php

/**
 * @file
 * Main file for warpwire module.
 */
require_once ('OAuth.php');

/**
 * Implementation of hook_init().
 */
function warpwire_init() {
  drupal_add_js(array(
    'warpwire' => 
      array(
          'warpwire_url' => variable_get('warpwire_url'),
          'warpwire_module_path' => drupal_get_path('module', 'warpwire'),
          'warpwire_share_default' => variable_get('warpwire_share_default'),
          'warpwire_title_default' => variable_get('warpwire_title_default'),
          'warpwire_autoplay_default' => variable_get('warpwire_autoplay_default'),
          'warpwire_cc_load_policy_default' => variable_get('warpwire_cc_load_policy_default')
      )
    ), 'setting');
}

/**
 * Implementation of hook_menu().
 */
function warpwire_menu() {

  $_menuItems = array();

  $_menuItems['admin/config/content/warpwire'] = array(
    'title' => 'Warpwire',
    'description' => 'Warpwire WYSIWYG editor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('warpwire_admin'),
    'access arguments' => array('administer warpwire'),
    'type' => MENU_NORMAL_ITEM,
  );

  $_menuItems['warpwire/external_content'] = array( 
    'title' => 'Warpwire External Content',
    'page callback' => 'warpwire_external_content',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,    
  );

  return $_menuItems;
}

function warpwire_external_content() {
  global $user, $base_url;

  // if user is not logged in, do not forward them via LTI
  if(!user_is_logged_in()) {

    $url_parts = parse_url($_GET['url']);
    if(!isset($url_parts['query']) || empty($url_parts['query']) || !stristr($url_parts['query'], 'returncontext')) {
      drupal_goto($_GET['url']);
      exit;
    }

    $query_parts = array();
    parse_str($url_parts['query'], $query_parts);

    if(!isset($query_parts['returnContext']) || empty($query_parts['returnContext'])) {
      drupal_goto($_GET['url']);
      exit;
    }

    drupal_goto($query_parts['returnContext']);
    exit;
  }

  $ww_drupal_api = variable_get('warpwire_group_name');

  // create a unique identifier for the group name - remove all non-alphanumeric
  // characters and replace with dash
  $ww_drupal_api_unique_id = preg_replace("/[^A-Za-z0-9]/", "-", strtolower($ww_drupal_api));

  // LTI parameters
  $params = array(
    'oauth_signature_method' => 'HMAC-SHA1',
    'oauth_consumer_key' => variable_get('warpwire_oauth_consumer_key'),
    'oauth_version' => '1.0',
    'oauth_timestamp' => time() + 300000,
    'oauth_nonce' => md5(rand()),
    'context_id' => $ww_drupal_api_unique_id,
    'context_label' => $ww_drupal_api,
    'context_title' => $ww_drupal_api,
    'tool_consumer_info_product_family_code' => 'drupal',
    'ext_lms' => 'drupal',
    'lis_person_name_family' => 'User ' . $user->uid,
    'lis_person_name_full' => 'Drupal User ' . $user->uid,
    'lis_person_name_given' => 'Drupal',
    'lis_person_contact_email_primary' => $user->mail,
    'lti_message_type' => 'basic-lti-launch-request',
    'lti_version' => 'LTI-1p0',
    'returnContext' => $_GET['url'],
    'roles' => implode(':',$user->roles),
    'user_id' => $user->name,
    'custom_context_id' => $ww_drupal_api_unique_id,
    'custom_plugin_info' => '',
  );

  // build the OAuth signature
  $oauthHMAC = new OAuthSignatureMethod_HMAC_SHA1();
  $oauthConsumer = new OAuthConsumer(variable_get('warpwire_oauth_consumer_key'), variable_get('warpwire_oauth_secret'));
  $req = OAuthRequest::from_request('POST', variable_get('warpwire_lti_url'), $params);
  $sig = $oauthHMAC->build_signature($req, $oauthConsumer, '');

  $params['oauth_signature'] = $sig;

  // build the form to submit LTI credentials
  $content = '<html><head></head><body><form id="warpwire_lti_post" method="POST" enctype="application/x-www-form-urlencoded" action="'.variable_get('warpwire_lti_url').'">'.PHP_EOL;
  foreach($params AS $key => $value) {
    $content .= '<input type="hidden" name="'.$key.'" value="'.$value.'" />';
  }
  $content .= '<div id="warpwire_display_submit"><p>Please press the Submit button to continue.</p>';
  $content .= '<p><input type="submit" value="Submit"></p></div>';
  $content .= '</form>';
  $content .= '
    <script>
      (function(){
        var warpwireDisplaySection = document.getElementById("warpwire_display_submit");
        if( (warpwireDisplaySection) && (warpwireDisplaySection != null) ) {
          warpwireDisplaySection.style.display = "none";

          setTimeout(function(){
            warpwireDisplaySection.style.display = "block";
          }, 4000);
        }

        var warpwireLTIForm = document.getElementById("warpwire_lti_post");

        if( (!warpwireLTIForm) || (warpwireLTIForm == null) )
          return(false);

        warpwireLTIForm.submit();
      })();
    </script>';

  $content .= '</body></html>';

  echo($content);
  exit;
}

// Module configuration form
function warpwire_admin($form) {
  $_adminFormElements = array();

  $_adminFormElements['warpwire_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Warpwire URL'),
    '#default_value' => variable_get('warpwire_url', ''),
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t("The URL of your Warpwire site."),
    '#required' => TRUE,
  );

  $_adminFormElements['warpwire_lti_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Warpwire LTI endpoint'),
    '#default_value' => variable_get('warpwire_lti_url', '/api/lti/'),
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t("The URL of your Warpwire LTI endpoint."),
    '#required' => TRUE,
  );  

  $_adminFormElements['warpwire_group_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Warpwire Drupal Group Name'),
    '#default_value' => variable_get('warpwire_group_name', 'Drupal Viewers'),
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t("The name of your Warpwire Drupal Group."),
    '#required' => TRUE,
  );

  $_adminFormElements['warpwire_oauth_consumer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Warpwire OAuth Consumer Key'),
    '#default_value' => variable_get('warpwire_oauth_consumer_key', 'warpwire_oauth_consumer_key'),
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t("Your Warpwire OAuth Consumer Key."),
    '#required' => TRUE,
  );  

  $_adminFormElements['warpwire_oauth_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Warpwire OAuth Secret'),
    '#default_value' => variable_get('warpwire_oauth_secret', 'warpwire_oauth_secret'),
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t("Your Warpwire OAuth Secret."),
    '#required' => TRUE,
  );  

  $_adminFormElements['warpwire_share_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display share links for embedded Warpwire media.'),
    '#default_value' => variable_get('warpwire_share_default', 1),
    '#description' => t("Enable/disable sharing options for embedded Warpwire media."),
  );

  $_adminFormElements['warpwire_title_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display title for embedded Warpwire videos.'),
    '#default_value' => variable_get('warpwire_title_default', 1),
    '#description' => t("Enable/disable title for embedded Warpwire media."),
  );

  $_adminFormElements['warpwire_autoplay_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable autoplay for embedded Warpwire media.'),
    '#default_value' => variable_get('warpwire_autoplay_default', 0),
    '#description' => t("Enable/disable autoplay for embedded Warpwire media."),
  );    

  $_adminFormElements['warpwire_cc_load_policy_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable closed captions by default for embedded Warpwire media.'),
    '#default_value' => variable_get('warpwire_cc_load_policy_default', 0),
    '#description' => t("Enable/disable closed captions by default for embedded Warpwire media."),
  );

  return system_settings_form($_adminFormElements);
}

/**
 * Implementation of hook_permission().
 */
function warpwire_permission() {
  return array('administer warpwire' => array(
    'title' => t('administer warpwire'),
    'description' => t('Choose media sources and other warpwire settings.'),
  ));
}

/**
 * Implementation of hook_wysiwyg_plugin().
 */
function warpwire_wysiwyg_plugin($editor, $version) {

  // local path to the wysiwyg editor
  $_editorPath = '';
  $_filename = '';
  switch (strtolower($editor)) {
    case 'tinymce':
      $_editorPath = '/editors/tinymce';
      $_filename = 'editor_plugin.js';
      break;
    case 'ckeditor':
      $_editorPath = '/editors/ckeditor';
      $_filename = 'plugin.js';
      break;
  }

  $plugins['warpwire'] = array(
    // A URL to the plugin's homepage.
    'url' => variable_get('warpwire_url'),
    // The full path to the native editor plugin, no trailing slash 
    'path' => drupal_get_path('module', 'warpwire') . $_editorPath,
    // The name of the plugin's main JavaScript file
    'filename' => $_filename,
    // A list of buttons provided by this native plugin
    'buttons' => array('warpwire' => t('Warpwire')),
    // Boolean whether the editor needs to load this plugin
    'load' => TRUE,
  );

  return $plugins;
}

/**
 * Implementation of hook_filter_info().
 */
function warpwire_filter_info() {

  cache_clear_all('*', 'cache_filter', TRUE);
  cache_clear_all('*', 'cache_field', TRUE);

  $filters['filter_html'] = array(
    'title' => t('Warpwire Filter - Filtered HTML'),
    'description' => t('Substitutes [warpwire:URL] with secure Warpwire player.'),
    'process callback' => 'warpwire_filter',
    'tips callback'  => 'warpwire_tips',
    'cache' => FALSE,
  );

  $filters['full_html'] = array(
    'title' => t('Warpwire Filter - Full HTML'),
    'description' => t('Substitutes [warpwire:URL] with secure Warpwire player.'),
    'process callback' => 'warpwire_filter',
    'tips callback'  => 'warpwire_tips',
    'cache' => FALSE,
  );

  return $filters;
}


/**
 * Implementation of hook_filter_tips().
 */
function warpwire_tips($delta, $format, $long = FALSE) {
  if ($long) {
    return t('You may insert videos from your Warpwire Media Libraries sites by embedding tags in the following manner: <code>[warpwire:URL]</code>.');
  }
  else {
    return t('You may insert Warpwire media with [warpwire:URL]');
  }
}

/**
 * Filter
 * Find [warpwire:URL] and replace them with embed iframes
 *
 * @param string $text
 * @param string $filter
 * @param string $format
 * @param string $langcode
 * @param string $cache
 * @param string $cache_id
 * @return string
 */

function warpwire_filter($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $user;

  // iframe template element
  $iframe_template = '<iframe src="URL"
    width="WIDTH"
    height="HEIGHT"
    frameborder="0"
    allowfullscreen="allowfullscreen"
    mozallowfullscreen="mozallowfullscreen"
    webkitallowfullscreen="webkitallowfullscreen">
    </iframe>';

  // match all warpwire shortcode instances returned from plugins
  if (preg_match_all('/<img.*?>/is', $text, $matches_code)) {
    foreach ($matches_code[0] as $ci => $code) {
      $textToReplace = $code;

      if (preg_match('/\[warpwire:(.*)?\]/is', urldecode($code), $matches_string)) {

        $url = htmlspecialchars_decode($matches_string[1]);

        // default width and height values for iframe
        $iframe_width = 480;
        $iframe_height = 360;

        $url_parts = parse_url($url);

        $parameters = array();
        if(!empty($url_parts['query']))
          parse_str($url_parts['query'], $parameters);

        if(!isset($parameters['share']) && (variable_get('warpwire_share_default') == 0))
          $parameters['share'] = 'false';

        if(!isset($parameters['title']) && (variable_get('warpwire_title_default') == 0))
          $parameters['title'] = 'false';

        if(!isset($parameters['autoplay']) && (variable_get('warpwire_autoplay_default') == 1))
          $parameters['autoplay'] = 'true';

        if(!isset($parameters['cc_load_policy']) && (variable_get('warpwire_cc_load_policy_default') == 1))
          $parameters['cc_load_policy'] = 1;

        $url_parts['query'] = http_build_query($parameters);

        $url = $url_parts['scheme'].'://'.$url_parts['host'].$url_parts['path'].'?'.$url_parts['query'];

        $parts = array(
          'q' => 'warpwire/external_content',
          'url' => $url
        );

        $partsString = http_build_query($parts);

        $url = '/?' . $partsString;

        if(!empty($parameters['width']))
          $iframe_width = $parameters['width'];
        if(!empty($parameters['height']))
          $iframe_height = $parameters['height'];       
          
        $patterns = array('/URL/', '/WIDTH/', '/HEIGHT/');
        $replace = array($url, $iframe_width, $iframe_height);
        $iframe_html = preg_replace($patterns, $replace, $iframe_template);

        // replace the shortcode with the iframe html
        $text = str_replace($textToReplace, $iframe_html, $text);
      }
    }
  }

  // match all warpwire shortcode instances manually inserted
  if (preg_match_all('/\[warpwire(\:(.+))?( .+)?\](.+)?\/a>/isU', $text, $matches_code)) {
    foreach ($matches_code[0] as $index => $code) {

      $textToReplace = $matches_code[0][$index];

      $url = '';
      if (!empty($matches_code[3][$index])) {
        $url = preg_replace('/^ href=("|\')/','',$matches_code[3][$index]);
      }

      $url = htmlspecialchars_decode($url);

      // default width and height values for iframe
      $iframe_width = 480;
      $iframe_height = 360;

      $url_parts = parse_url($url);

      $parameters = array();
      if(!empty($url_parts['query']))
        parse_str($url_parts['query'], $parameters);

      if(!isset($parameters['share']) && (variable_get('warpwire_share_default') == 0))
        $parameters['share'] = 'false';

      if(!isset($parameters['title']) && (variable_get('warpwire_title_default') == 0))
        $parameters['title'] = 'false';

      if(!isset($parameters['autoplay']) && (variable_get('warpwire_autoplay_default') == 1))
        $parameters['autoplay'] = 'true';

      if(!isset($parameters['cc_load_policy']) && (variable_get('warpwire_cc_load_policy_default') == 1))
        $parameters['cc_load_policy'] = 1;

      $url_parts['query'] = http_build_query($parameters);

      $url = $url_parts['scheme'].'://'.$url_parts['host'].$url_parts['path'].'?'.$url_parts['query'];

      $parts = array(
        'q' => 'warpwire/external_content',
        'url' => $url
      );

      $partsString = http_build_query($parts);

      $url = '/?' . $partsString;

      if(!empty($parameters['width']))
        $iframe_width = $parameters['width'];
      if(!empty($parameters['height']))
        $iframe_height = $parameters['height'];        

      $patterns = array('/URL/', '/WIDTH/', '/HEIGHT/');
      $replace = array($url, $iframe_width, $iframe_height);
      $iframe_html = preg_replace($patterns, $replace, $iframe_template);

      // replace the shortcode with the iframe html
      $text = str_replace($textToReplace, $iframe_html, $text);
    }
  }

  return $text;
}
