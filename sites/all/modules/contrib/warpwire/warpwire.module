<?php
/**
 * Implementation of hook_init().
 */
function warpwire_init() {
  drupal_add_js(array('warpwire' => array('warpwire_url' => variable_get('warpwire_url'))), 'setting');
}

/**
 * Implementation of hook_menu().
 */
function warpwire_menu() {

  $_menuItems = array();

  $_menuItems['admin/config/content/warpwire'] = array(
    'title' => 'Warpwire',
    'description' => 'Warpwire WYSIWYG editor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('warpwire_admin'),
    'access arguments' => array('administer warpwire'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $_menuItems;
}

// Module configuration form
function warpwire_admin($form) {
  $_adminFormElements = array();

  $_adminFormElements['warpwire_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Warpwire URL'),
    '#default_value' => variable_get('warpwire_url', ''),
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t("The URL of your Warpwire site."),
    '#required' => TRUE,
  );

  return system_settings_form($_adminFormElements);
}

/**
 * Implementation of hook_permission().
 */
function warpwire_permission() {
  return array('administer warpwire' => array(
    'title' => t('administer warpwire'),
    'description' => t('Edit Warpwire settings.'),
  ));
}

/**
 * Implementation of hook_wysiwyg_plugin().
 */
function warpwire_wysiwyg_plugin($editor, $version) {

  // local path to the wysiwyg editor
  $_editorPath = '';
  $_filename = '';
  switch (strtolower($editor)) {
    // case 'tinymce':
    //   $_editorPath = '/editors/tinymce';
    //   $_filename = 'editor_plugin.js';
    //   break;
    case 'ckeditor':
      $_editorPath = '/editors/ckeditor';
      $_filename = 'plugin.js';
      break;
  }

  $plugins['warpwire'] = array(
    // A URL to the plugin's homepage.
    'url' => variable_get('warpwire_url'),
    // The full path to the native editor plugin, no trailing slash 
    'path' => drupal_get_path('module', 'warpwire') . $_editorPath,
    // The name of the plugin's main JavaScript file
    'filename' => $_filename,
    // A list of buttons provided by this native plugin
    'buttons' => array('warpwire' => t('Warpwire')),
    // Boolean whether the editor needs to load this plugin
    'load' => TRUE,
  );

  return $plugins;
}

/**
 * Implementation of hook_filter_info().
 */
function warpwire_filter_info() {

  cache_clear_all('*', 'cache_filter', TRUE);
  cache_clear_all('*', 'cache_field', TRUE);

  $filters['filter_html'] = array(
    'title' => t('Warpwire Filter'),
    'description' => t('Substitutes [warpwire:URL] with secure Warpwire player.'),
    'process callback' => 'warpwire_filter',
    'tips callback'  => 'warpwire_tips',
    'cache' => FALSE,
  );
  return $filters;
}


/**
 * Implementation of hook_filter_tips().
 */
function warpwire_tips($delta, $format, $long = FALSE) {
  if ($long) {
    return t('<p>You may insert videos from your Warpwire Media Libraries sites by embedding tags in the following manner: <code>[warpwire:URL]</code>.</p>');
  }
  else {
    return t('You may insert Warpwire media with [warpwire:URL]');
  }
}

/**
 * Filter
 * Find [warpwire:URL] and replace them with embed iframes
 *
 * @param string $text
 * @param string $filter
 * @param string $format
 * @param string $langcode
 * @param string $cache
 * @param string $cache_id
 * @return string
 */

function warpwire_filter($text, $filter, $format, $langcode, $cache, $cache_id) {

  // iframe template element
  $iframe_template = '<iframe src="URL"
    width="WIDTH"
    height="HEIGHT"
    frameborder="0"
    allowfullscreen="allowfullscreen"
    mozallowfullscreen="mozallowfullscreen"
    webkitallowfullscreen="webkitallowfullscreen">
    </iframe>';

  // match all warpwire shortcode instances returned from plugins
  if (preg_match_all('/<img.*?>/is', $text, $matches_code)) {
    foreach ($matches_code[0] as $ci => $code) {
      $textToReplace = $code;

      if (preg_match('/\[warpwire:(.*)?\]/is', urldecode($code), $matches_string)) {

        $url = htmlspecialchars_decode($matches_string[1]);

        // default width and height values for iframe
        $iframe_width = 480;
        $iframe_height = 360;

        $url_parts = parse_url($url);

        parse_str($url_parts['query'], $parameters);

        if(!empty($parameters['width']))
          $iframe_width = $parameters['width'];
        if(!empty($parameters['height']))
          $iframe_height = $parameters['height'];       
          
        $patterns = array('/URL/', '/WIDTH/', '/HEIGHT/');
        $replace = array($url, $iframe_width, $iframe_height);
        $iframe_html = preg_replace($patterns, $replace, $iframe_template);

        // replace the shortcode with the iframe html
        $text = str_replace($textToReplace, $iframe_html, $text);
      }
    }
  }

  // match all warpwire shortcode instances manually inserted
  if (preg_match_all('/\[warpwire(\:(.+))?( .+)?\](.+)?\/a>/isU', $text, $matches_code)) {
    foreach ($matches_code[0] as $index => $code) {

      $textToReplace = $matches_code[0][$index];

      $url = '';
      if (!empty($matches_code[3][$index])) {
        $url = preg_replace('/^ href=("|\')/','',$matches_code[3][$index]);
      }

      // default width and height values for iframe
      $iframe_width = 480;
      $iframe_height = 360;

      $url_parts = parse_url($url);

      $parameters = array();
      if(!empty($url_parts['query']))
        parse_str($url_parts['query'], $parameters);

      if(!empty($parameters['width']))
        $iframe_width = $parameters['width'];
      if(!empty($parameters['height']))
        $iframe_height = $parameters['height'];        

      $patterns = array('/URL/', '/WIDTH/', '/HEIGHT/');
      $replace = array($url, $iframe_width, $iframe_height);
      $iframe_html = preg_replace($patterns, $replace, $iframe_template);

      // replace the shortcode with the iframe html
      $text = str_replace($textToReplace, $iframe_html, $text);
    }
  }

  return $text;
}
