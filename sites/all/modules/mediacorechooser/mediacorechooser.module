<?php

/**
 * @file
 * Main file for mediacorechooser module.
 */

include 'mediacorechoosersigning.php';


/**
 * Implementation of hook_menu().
 */
function mediacorechooser_menu() {

  $items = array();

  $items['admin/config/content/mediacorechooser'] = array(
    'title' => 'MediaCore Chooser',
    'description' => 'Filter for MediaCore Videos and WYSIWYG editor button.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediacorechooser_admin'),
    'access arguments' => array('administer mediacorechooser settings'),
    'type' => MENU_NORMAL_ITEM,
   );
  return $items;
}


function mediacorechooser_admin() {
  $form = array();

  $form['mediacorechooser_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Your MediaCore URL'),
    '#default_value' => variable_get('mediacorechooser_url', 'http://demo.mediacore.tv'),
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t("The URL of your MediaCore library. <br /><br />If you do not see your changes reflected in the MediaCore chooser, <br />try clearning the cache at /admin/config/development/performance."),
    '#required' => TRUE,
  );

  $form['mediacorechooser_enable_signing'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable URL Signing'),
    '#default_value' => variable_get('mediacorechooser_enable_signing', 0),
    '#description' => t("Check this box if you'd like to enable URL signing for your MediaCore embeds. <br />You must have a Key ID and Secret key set before enabling URL signing. <br />Contact support@mediacore.com to inquire about embedding private videos with signed URLS."),
  );

  $form['mediacorechooser_key_id'] = array(
    '#type' => 'textfield',
    '#title' => t('URL Signing Key ID'),
    '#default_value' => variable_get('mediacorechooser_key_id'),
    '#size' => 40,
    '#maxlength' => 11,
    '#description' => t("Please enter an 11 character Base64 Key ID."),
    '#required' => FALSE,
  );

  $form['mediacorechooser_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('URL Signing Secret Key'),
    '#default_value' => variable_get('mediacorechooser_secret_key'),
    '#size' => 40,
    '#maxlength' => 300,
    '#description' => t("Please enter a Base64 encoded secret key <br />(the original key before encoding will be 32 or 128 characters long)."),
    '#required' => FALSE,
  );

  return system_settings_form($form);
}


function mediacorechooser_admin_validate($form, &$form_state) {
	$enable_signing = $form_state['values']['mediacorechooser_enable_signing'];
	$key_id = $form_state['values']['mediacorechooser_key_id'];
	$secret_key = $form_state['values']['mediacorechooser_secret_key'];
	$secret_key_decoded = base64_decode($secret_key);

	// key_id and secret_key need to be valid base64 strings. secret key needs to be 64 or 128 char and key_id is 11 char
	if ($enable_signing && (empty($key_id) || empty($secret_key))) {
		form_set_error('mediacorechooser_enable_signing', t('You must set a Key ID and Secret Key before enabling URL signing'));
	}
	if (!empty($key_id) && strlen($key_id) != 11) {
		form_set_error('mediacorechooser_key_id', t('Your Key ID must be 11 characters long.'));
	}
	if (!empty($secret_key) && (strlen($secret_key_decoded) != 32 && strlen($secret_key_decoded) != 128)) {
		form_set_error('mediacorechooser_secret_key', t('Your Base64 decoded secret key must be 32 or 128 characters long. The base64 decoded key you entered is ' . strlen($secret_key_decoded) . ' characters long.'));
	}
}


/**
 * Implementation of hook_permission().
 */
function mediacorechooser_permission() {
  return array('administer mediacorechooser');
}


function mediacorechooser_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'tinymce':
      $plugins['mediacorechooser'] = array(
        'path' => drupal_get_path('module', 'mediacorechooser') . '/editors/tinymce',
        'filename' => 'editor_plugin.js',
        'buttons' => array('mediacorechooser' => t('MediaCore Chooser')),
        'url' => 'http://mediacore.com/plugins/',
        'load' => TRUE,
		'options' => array(
			'mediacore_url' => variable_get('mediacorechooser_url', 'http://demo.mediacore.tv'),
		)
      );
      break;
    case 'ckeditor':
      $plugins['mediacorechooser'] = array(
        'path' => drupal_get_path('module', 'mediacorechooser') . '/editors/ckeditor',
        'filename' => 'plugin.js',
        'buttons' => array('mediacorechooser' => t('MediaCore Chooser')),
        'url' => 'http://mediacore.com/plugins/',
        'load' => TRUE,
		'options' => array(
			'mediacore_url' => variable_get('mediacorechooser_url', 'http://demo.mediacore.tv'),
		)
      );
      break;
  }

  return $plugins;
}


/**
 * Implementation of hook_filter_info().
 */
function mediacorechooser_filter_info() {

  $filters['filter_html'] = array(
    'title' => t('MediaCore Filter'),
    'description' => t('Substitutes [mediacore:URL] with HTML5 video player.'),
    'process callback' => '_mediacorechooser_process',
    'settings callback' => '_mediacorechooser_settings',
    'tips callback'  => '_mediacorechooser_tips',
    'cache' => FALSE,
  );
  return $filters;

}



function _mediacorechooser_settings($format) {
}


/**
 * Implementation of hook_filter_tips().
 */
function _mediacorechooser_tips($delta, $format, $long = FALSE) {
  if ($long) {
    return t('<p>You may insert videos from MediaCore sites by using a simple tag <code>[mediacore:URL]</code>.</p>');
  }
  else {
    return t('You may insert MediaCore videos with [mediacore:URL]');
  }
}


function _mediacorechooser_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if (preg_match_all('/\[mediacore(\:(.+))?( .+)?\]/isU', $text, $matches_code)) {

    foreach ($matches_code[0] as $ci => $code) {

      $video = array('source' => $matches_code[2][$ci],
                     'width' => '560',
                     'height' => '315');
      if ($matches_code[3][$ci] && preg_match_all('/\s+([a-zA-Z_]+)\:(\s+)?([0-9a-zA-Z\/]+)/i', $matches_code[3][$ci], $matches_attributes)) {
         foreach ($matches_attributes[0] AS $ai => $attribute) {
           $video[$matches_attributes[1][$ai]] = $matches_attributes[3][$ai];
         }
      }

	  $enable_signing = variable_get('mediacorechooser_enable_signing');
	  $key_id = variable_get('mediacorechooser_key_id');
	  $secret_key = variable_get('mediacorechooser_secret_key');

	  if ($enable_signing && $key_id && $secret_key) {
		  $signed_qs = mcore_get_signed_qs($video['source'] . '/embed_player', 'iframe=True', $key_id, $secret_key, $ttl=60);
		  $replacement = '
			  <iframe src="' . $video['source'] . '/embed_player?' . $signed_qs . '"';
	  }
	  else {
		  $replacement = '
			  <iframe src="' . $video['source'] . '/embed_player?iframe=True"';
	  }
	  $replacement .= '
            width="' . $video['width'] . '"
            height="' . $video['height'] . '"
            frameborder="0"
            allowfullscreen="allowfullscreen"
            mozallowfullscreen="mozallowfullscreen"
            webkitallowfullscreen="webkitallowfullscreen">
      </iframe>';

      $text = str_replace($code, $replacement, $text);

    }
  }
  return $text;
}


